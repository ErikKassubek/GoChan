package main

import (
	"fmt"
	"math/rand"
	"os/exec"
	"reflect"
	"time"
)

var max_runs = 50  // max number of runs 
var no_failed = 10  // max number of already checked orders

var switch_size = make(map[int]int) // id -> size
var queue = make([]map[int]int, 0)  // already tested orders

var restults = make([]string, 0)  // collect result messages

/*
Get a string from a switch order
@param soe map[int]int: order
@return string: string representing the switch order
*/
func toString(soe map[int]int) string {
	res := ""
	i := 0
	for key, c := range soe {
		res += fmt.Sprint(key) + "," + fmt.Sprint(c)
		if i != len(soe)-1 {
			res += ";"
		}
		i++
	}
	return res
}

/*
Main function
*/
func main() {
	$$SWITCH_SIZE$$

	rand.Seed(time.Now().UTC().UnixNano())

	for no_failed > 0  && max_runs > 0 {
		order_add := make(map[int]int)
		for key, size := range switch_size {
			order_add[key] = rand.Intn(size)
		}
		if wasNotInQueue(order_add) {
			queue = append(queue, order_add)
		} else {
			no_failed -= 1
		}	
		max_runs -= 1
	}

	for len(queue) != 0 {
		order := queue[0]
		queue = queue[1:]

		var cmd *exec.Cmd
		if len(order) == 0 {
			cmd = exec.Command("$$COMMAND$$")
		} else {
			cmd = exec.Command("$$COMMAND$$", "-order=\"" + toString(order) + "\"")
		}

		out, err := cmd.Output()
		if err != nil {
			fmt.Printf("Running %s failed!\n", cmd)
			continue
		}

		output := string(out)

		fmt.Println(output)
		fmt.Println("...........................")
	}
}

/*
Check if an order was not inserted into the queue before
@param order map[int]int: map representing an order
@return bool: true, if the order was not in the queue before, false otherwise
*/
func wasNotInQueue(order map[int]int) bool {
	for _, i := range queue {
		if reflect.DeepEqual(i, order) {
			return false
		}
	}
	return true
}
